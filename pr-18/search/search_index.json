{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"A sample Python project","text":"<p>A sample project that exists as an aid to the Python Packaging User Guide's Tutorial on Packaging and Distributing Projects.</p> <p>This project does not aim to cover best practices for Python project development as a whole. For example, it does not provide guidance or tool recommendations for version control, documentation, or testing.</p> <p>The source for this project is available here.</p> <p>The metadata for a Python project is defined in the <code>pyproject.toml</code> file, an example of which is included in this project. You should edit this file accordingly to adapt this sample project to your needs.</p> <p>This is the README file for the project.</p> <p>The file should use UTF-8 encoding and can be written using reStructuredText or markdown with the appropriate key set. It will be used to generate the project webpage on PyPI and will be displayed as the project homepage on common code-hosting services, and should be written for that purpose.</p> <p>Typical contents for this file would include an overview of the project, basic usage examples, etc. Generally, including the project changelog in here is not a good idea, although a simple \u201cWhat's New\u201d section for the most recent version may be appropriate.</p>"},{"location":"#using-this-template-repository","title":"Using this Template Repository","text":"<p>This fork of pypa/sampleproject adds pinned dependency management, a documentation site, VS Code integration, improved GitHub integration, and much more.</p> <p>After creating a repository using this template, some files need to be updated to make it your own:</p>"},{"location":"#update-repository-and-package-names","title":"Update Repository and Package Names","text":"<ol> <li>Find and replace <code>patrick-5546/sampleproject</code> with the owner and name of your repository</li> <li>Rename the directory <code>src/sample/</code> to the name of your package</li> <li>Find and replace <code>sample</code> with the name of your package</li> </ol>"},{"location":"#update-readme-badges","title":"Update README Badges","text":"<ol> <li>In <code>README.md</code>, update <code>testbadge</code>, <code>testfile</code>, <code>licensebadge</code>, and <code>licenseurl</code>    with the repository owner and name where applicable</li> <li>Create an empty gist named <code>covbadge.json</code> and copy its ID</li> <li>In <code>README.md</code>, update <code>covbadge</code> with the repository owner and gist ID where applicable</li> <li>In <code>.github/workflows/tests.yml</code>, update the \"Make badge\" step of \"Coverage\" with the    repository owner, repository name, and gist ID where applicable</li> <li>Create a GitHub personal access token with the \"gist\" scope and copy its value</li> <li>Create a repository secret named <code>GIST_TOKEN</code> and paste the token</li> </ol>"},{"location":"#update-infrastructure","title":"Update Infrastructure","text":"<ol> <li>In <code>.github/CODEOWNERS</code>, update code owners accordingly</li> </ol>"},{"location":"#setup-docs","title":"Setup Docs","text":"<p>Some manual setup is required to publish the Docs using GitHub pages:</p> <ol> <li>Setup the <code>main</code> version of the Docs</li> <li>Create and use the <code>dev</code> development environment,       running the commands below in it</li> <li>Switch to the main branch if you are not already in it: <code>git switch main</code></li> <li>Create the <code>main</code> version and alias it to <code>latest</code>:       <code>mike deploy --update-aliases main latest</code></li> <li>Make <code>latest</code> the default version: <code>mike set-default latest</code></li> <li>Push the <code>gh-pages</code> branch: <code>git switch gh-pages</code> then <code>git push</code></li> <li>In the repository settings for Pages, set the branch to <code>gh-pages</code></li> </ol> <p>For more details about versioning, search for \"versioning\" in the Docs.</p>"},{"location":"#update-readme","title":"Update README","text":"<p>In <code>README.md</code>,</p> <ol> <li>update the title and</li> <li>delete everything after the badge URLs</li> </ol>"},{"location":"coverage/","title":"Coverage Report","text":""},{"location":"license/","title":"License","text":"<pre><code>Copyright (c) 2016 The Python Packaging Authority (PyPA)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"developer_guide/contributing/","title":"Contributing","text":"<p>This repository's infrastructure features pinned dependency management, a documentation site, an automated release process, GitHub integration, VS Code integration, and much more.</p>"},{"location":"developer_guide/contributing/#setup-for-local-development","title":"Setup for Local Development","text":"<ol> <li>Install tox</li> <li>Clone the repository</li> </ol>"},{"location":"developer_guide/contributing/#tox","title":"Tox","text":"<p>tox is used to automate and standardize testing across local development environments and CI/CD pipelines.</p>"},{"location":"developer_guide/contributing/#tox-configuration","title":"Tox Configuration","text":"<p>The tox configuration for this repository can be found in <code>tox.ini</code>.</p>"},{"location":"developer_guide/contributing/#tox-environments","title":"Tox Environments","text":"<p>Each tox environment accomplishes a specific purpose. List all tox environments and their descriptions with <code>tox list</code>.</p> <p>Details about each environment are given below:</p> <ul> <li><code>py*</code>: for a particular python version,<ol> <li>checks if the package can be built (may be commented out), and</li> <li>runs tests and generates a coverage report source file <code>.coverage</code></li> </ol> </li> <li><code>check-release</code>: checks that the package is ready to be released</li> <li><code>coverage</code>: converts <code>.coverage</code> to human readable formats<ul> <li><code>html</code>: used to create the Coverage Report page</li> <li><code>json</code>: used to create the coverage badge in the README</li> </ul> </li> <li><code>dev</code>: used to create a development environment with all dependencies installed<ul> <li>When in the development environment, the commands that are run in each environment   can be run in your terminal</li> </ul> </li> <li><code>docs-build</code>: builds the docs to ensure that they are in a valid state</li> <li><code>docs-serve</code>: runs the docs development server</li> <li><code>format</code>: runs the formatters</li> <li><code>lint</code>: runs the linters</li> <li><code>upgrade</code>: updates the dependencies</li> </ul>"},{"location":"developer_guide/contributing/#running-tox-environments","title":"Running Tox Environments","text":"<ul> <li><code>tox -e &lt;environment&gt;</code> will run a single environment</li> <li><code>tox</code> will run all the default environments as noted by <code>tox list</code><ul> <li>To set an environment as default, add it to <code>envlist</code> in <code>tox.ini</code></li> </ul> </li> </ul> <p>Known issues running tox environments:</p> Environment Issue Solution <code>coverage</code> <code>coverage combine</code> outputs \"No data to combine\" <code>coverage</code> cannot be run independently, as it needs <code>.coverage</code> from <code>testenv</code>: run <code>tox</code> instead. If you are still getting this error, remove <code>.coverage</code> and rerun."},{"location":"developer_guide/contributing/#tox-development-environments","title":"Tox Development Environments","text":"<p>The <code>tox devenv</code> command will create a virtual environment and install the environment's dependencies in it.</p> <ul> <li>To create a virtual environment with all dependencies installed,   run <code>tox devenv -e dev .venv</code>.</li> <li>Using a virtual environment: activate Python virtual environments</li> </ul>"},{"location":"developer_guide/contributing/#dependencies","title":"Dependencies","text":"<p>Dependencies are defined in <code>pyproject.toml</code>. They are pinned and managed using pip-tools. The pinned dependencies can be found in <code>requirements/</code>.</p>"},{"location":"developer_guide/contributing/#how-to-add-or-update-dependencies","title":"How to Add or Update Dependencies","text":"<ol> <li>To add a dependency, add it in <code>pyproject.toml</code>;    where you add the dependency depends on what type of dependency it is:<ul> <li>Add project dependencies to the <code>dependencies</code> list</li> <li>Add environment-specific dependencies to the corresponding list   below <code>[project.optional-dependencies]</code></li> </ul> </li> <li>Run the <code>upgrade</code> tox environment: <code>tox -e upgrade</code></li> <li>Verify that the tests still pass: <code>tox</code></li> <li>If you are using the development environment, recreate it: <code>tox devenv -e dev .venv</code></li> <li>Commit and push the changes</li> </ol>"},{"location":"developer_guide/docs/","title":"Docs","text":"<p>The Docs were created using Material for MkDocs, a Markdown static site generator with a material design theme.</p>"},{"location":"developer_guide/docs/#running-docs-locally","title":"Running Docs Locally","text":"<ol> <li>Create and use the <code>dev</code> development environment</li> <li>Run the development server: <code>mkdocs serve</code><ul> <li>If you are using VS Code, see the VS Code Integration page</li> </ul> </li> </ol>"},{"location":"developer_guide/docs/#building-for-offline-usage","title":"Building for Offline Usage","text":"<p>To build for offline usage, uncomment the <code>offline</code> plugin in <code>mkdocs.yml</code> before running <code>mkdocs build</code>. For what this does, refer to the related Material for Mkdocs docs page.</p>"},{"location":"developer_guide/docs/#features","title":"Features","text":""},{"location":"developer_guide/docs/#automatic-documentation-from-sources","title":"Automatic Documentation from Sources","text":"<p>mkdocstrings was used to create the Code Reference section of the Docs.</p> <p>incompatible <code>theme.features</code></p> <p>mkdocstrings is not compatible with <code>theme.features.navigation.indexes</code>.</p>"},{"location":"developer_guide/docs/#versioning","title":"Versioning","text":"<p>The Docs site has the following versions:</p> <ul> <li>Version from branches<ul> <li><code>main</code>: aliased to <code>latest</code><ul> <li>Whenever you are on a version other than <code>latest</code>, a warning will be displayed   above the header</li> </ul> </li> <li><code>pr-&lt;pr number&gt;</code>:<ul> <li>Created when a pull request is opened</li> <li>Updated when the pull request commits are modified</li> <li>Deleted when the pull request is closed</li> </ul> </li> </ul> </li> <li>Version from releases: <code>&lt;x.x&gt;</code></li> </ul>"},{"location":"developer_guide/github_actions/","title":"GitHub Actions","text":""},{"location":"developer_guide/releases/","title":"Releases","text":""},{"location":"developer_guide/releases/#preparing-for-your-first-release","title":"Preparing for your first release","text":"<ol> <li>Go through <code>pyproject.toml</code> and update the relevant fields</li> <li>In <code>tox.ini</code>, set <code>check-release</code> as a default environment by adding it to <code>envlist</code></li> <li>In this file, uncomment badges and uncomment and update their URLs with the package name    where applicable</li> <li>Create a repository secret named <code>PYPI_API_TOKEN</code> with the corresponding value</li> </ol>"},{"location":"developer_guide/releases/#publishing-a-new-release","title":"Publishing a new release","text":"<p>TBD.</p>"},{"location":"developer_guide/vscode/","title":"VS Code","text":""},{"location":"developer_guide/vscode/#setup-for-vs-code","title":"Setup for VS Code","text":"<ol> <li><code>cd</code> to the root directory of the repository</li> <li>Create the <code>dev</code> development environment:    <code>tox devenv -e dev .venv</code></li> <li>Open the repository in VS Code: <code>code .</code></li> <li>Install the recommended extensions</li> </ol>"},{"location":"developer_guide/vscode/#configuration-files","title":"Configuration Files","text":"<p>VS Code configuration files can be found in the <code>.vscode/</code> directory.</p> <ul> <li><code>cspell.json</code>: configuration for the spell checker</li> <li><code>extensions.json</code>: recommended extensions<ul> <li>See the recommended extensions by searching for \"@recommended\" in the Extensions view</li> </ul> </li> <li><code>google_docstring_custom_template.mustache</code>: a custom docstrings template for   autoDocstring   until this issue is resolved</li> <li><code>launch.json</code>: launch configurations<ul> <li>Run the launch configurations from the Run and Debug view</li> </ul> </li> <li><code>settings.json</code>: settings</li> </ul>"},{"location":"developer_guide/vscode/#shortcuts","title":"Shortcuts","text":"<p>Useful VS Code shortcuts that aren't specific to this repository.</p> <p>MacOS Shortcuts</p> <p>For keyboard shortcuts on MacOS, substitute Ctrl with Cmd.</p> <ul> <li>Open Quick Open: Ctrl+P<ul> <li>Search for files</li> <li>Open the command palette by typing \"&gt; \"</li> <li>Search for tasks by typing \"task \"</li> <li>Search for launch configurations by typing \"debug \"</li> </ul> </li> <li>Open Command Palette: Ctrl+Shift+P</li> </ul>"},{"location":"developer_guide/vscode/#integrations","title":"Integrations","text":""},{"location":"developer_guide/vscode/#docs","title":"Docs","text":"<p>Related recommended extensions enhance Markdown file previews, check for markdownlint errors, enhance VS Code Markdown support, add autocomplete for <code>mkdocs.yml</code>, and more:</p> <ul> <li>The enhanced Markdown file preview replaces VS Code's built-in preview</li> <li>The configuration file for markdownlint is <code>.markdownlint.json</code></li> <li>Format tables in a Markdown file with Alt+Shift+F<ul> <li>On Linux, the shortcut is Ctrl+Shift+I</li> </ul> </li> </ul> <p>There are also launch configurations to run the development server and open browsers:</p> Launch Configuration Description Serve Docs runs <code>mkdocs serve</code> Open Docs in Chrome runs <code>mkdocs serve</code> and open Docs in Chrome Open Docs in Edge runs <code>mkdocs serve</code> and open Docs in Microsoft Edge"},{"location":"developer_guide/vscode/#python","title":"Python","text":"<p>Related recommended extensions improve autocomplete, format on save, lint, test, and more:</p> <ul> <li>Adds autocomplete for docstrings, type hints, and functions</li> <li>Runs the black and isort   formatters when a file is saved</li> <li>Runs the flake8 and mypy   linters when a file is saved and after formatters run</li> <li>Run tests from the Testing view</li> </ul>"},{"location":"developer_guide/vscode/#common-extensions-settings","title":"Common Extensions &amp; Settings","text":"<p>Other recommended extensions further improve autocomplete (AI, file paths), check spelling, and show the commit and author who last modified the current line, and more:</p> <ul> <li>Mark a word as spelled correct by hovering over it, selecting <code>Quick Fix...</code>,   then selecting <code>Add \"&lt;word&gt;\" to config: .vscode/cspell.json</code></li> <li>Hover over the current line blame annoation at the end of the line for more details</li> </ul> <p>Common settings:</p> <ul> <li>Make whitespace at the end of the line visible</li> <li>Ruler at the line length limit</li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>sample<ul> <li>simple</li> </ul> </li> </ul>"},{"location":"reference/sample/","title":"sample","text":"<p>This is a sample package.</p>"},{"location":"reference/sample/#sample-functions","title":"Functions","text":""},{"location":"reference/sample/#sample.main","title":"main","text":"<pre><code>main()\n</code></pre> <p>Entry point for the application script.</p> Source code in <code>sample/__init__.py</code> <pre><code>def main():\n\"\"\"Entry point for the application script.\"\"\"\nprint(\"Call your main application code here\")\n</code></pre>"},{"location":"reference/sample/simple/","title":"simple","text":"<p>This is a simple module.</p>"},{"location":"reference/sample/simple/#sample.simple-functions","title":"Functions","text":""},{"location":"reference/sample/simple/#sample.simple.add_one","title":"add_one","text":"<pre><code>add_one(number)\n</code></pre> <p>Add one to <code>number</code>.</p> <p>Parameters:</p> Name Type Description Default <code>number</code> <code>int</code> <p>An integer.</p> required <p>Returns:</p> Type Description <code>int</code> <p>A[n] int that is one greater than <code>number</code>.</p> Source code in <code>sample/simple.py</code> <pre><code>def add_one(number: int) -&gt; int:\n\"\"\"Add one to `number`.\n    Args:\n        number (int): An integer.\n    Returns:\n        A[n] int that is one greater than `number`.\n    \"\"\"\nreturn number + 1\n</code></pre>"},{"location":"user_guide/commands/","title":"Commands","text":""},{"location":"user_guide/configuration/","title":"Configuration","text":""},{"location":"user_guide/getting_started/","title":"Getting Started","text":""},{"location":"user_guide/installation/","title":"Installation","text":""}]}